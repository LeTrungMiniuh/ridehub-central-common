/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ridehub.avro.common;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventEnvelope extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3252835946725419643L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventEnvelope\",\"namespace\":\"com.ridehub.avro.common\",\"fields\":[{\"name\":\"eventName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"payload\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"JSON serialized payload of any type\",\"default\":null},{\"name\":\"payloadType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"The class name of the payload type for deserialization\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventEnvelope> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventEnvelope> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventEnvelope> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventEnvelope> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventEnvelope> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventEnvelope to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventEnvelope from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventEnvelope instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventEnvelope fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String eventName;
  /** JSON serialized payload of any type */
  private java.lang.String payload;
  /** The class name of the payload type for deserialization */
  private java.lang.String payloadType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventEnvelope() {}

  /**
   * All-args constructor.
   * @param eventName The new value for eventName
   * @param payload JSON serialized payload of any type
   * @param payloadType The class name of the payload type for deserialization
   */
  public EventEnvelope(java.lang.String eventName, java.lang.String payload, java.lang.String payloadType) {
    this.eventName = eventName;
    this.payload = payload;
    this.payloadType = payloadType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventName;
    case 1: return payload;
    case 2: return payloadType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventName = value$ != null ? value$.toString() : null; break;
    case 1: payload = value$ != null ? value$.toString() : null; break;
    case 2: payloadType = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventName' field.
   * @return The value of the 'eventName' field.
   */
  public java.lang.String getEventName() {
    return eventName;
  }



  /**
   * Gets the value of the 'payload' field.
   * @return JSON serialized payload of any type
   */
  public java.lang.String getPayload() {
    return payload;
  }



  /**
   * Gets the value of the 'payloadType' field.
   * @return The class name of the payload type for deserialization
   */
  public java.lang.String getPayloadType() {
    return payloadType;
  }



  /**
   * Creates a new EventEnvelope RecordBuilder.
   * @return A new EventEnvelope RecordBuilder
   */
  public static com.ridehub.avro.common.EventEnvelope.Builder newBuilder() {
    return new com.ridehub.avro.common.EventEnvelope.Builder();
  }

  /**
   * Creates a new EventEnvelope RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventEnvelope RecordBuilder
   */
  public static com.ridehub.avro.common.EventEnvelope.Builder newBuilder(com.ridehub.avro.common.EventEnvelope.Builder other) {
    if (other == null) {
      return new com.ridehub.avro.common.EventEnvelope.Builder();
    } else {
      return new com.ridehub.avro.common.EventEnvelope.Builder(other);
    }
  }

  /**
   * Creates a new EventEnvelope RecordBuilder by copying an existing EventEnvelope instance.
   * @param other The existing instance to copy.
   * @return A new EventEnvelope RecordBuilder
   */
  public static com.ridehub.avro.common.EventEnvelope.Builder newBuilder(com.ridehub.avro.common.EventEnvelope other) {
    if (other == null) {
      return new com.ridehub.avro.common.EventEnvelope.Builder();
    } else {
      return new com.ridehub.avro.common.EventEnvelope.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventEnvelope instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventEnvelope>
    implements org.apache.avro.data.RecordBuilder<EventEnvelope> {

    private java.lang.String eventName;
    /** JSON serialized payload of any type */
    private java.lang.String payload;
    /** The class name of the payload type for deserialization */
    private java.lang.String payloadType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ridehub.avro.common.EventEnvelope.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[2].schema(), other.payloadType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing EventEnvelope instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ridehub.avro.common.EventEnvelope other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventName)) {
        this.eventName = data().deepCopy(fields()[0].schema(), other.eventName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.payloadType)) {
        this.payloadType = data().deepCopy(fields()[2].schema(), other.payloadType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'eventName' field.
      * @return The value.
      */
    public java.lang.String getEventName() {
      return eventName;
    }


    /**
      * Sets the value of the 'eventName' field.
      * @param value The value of 'eventName'.
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder setEventName(java.lang.String value) {
      validate(fields()[0], value);
      this.eventName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventName' field has been set.
      * @return True if the 'eventName' field has been set, false otherwise.
      */
    public boolean hasEventName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventName' field.
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder clearEventName() {
      eventName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * JSON serialized payload of any type
      * @return The value.
      */
    public java.lang.String getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * JSON serialized payload of any type
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder setPayload(java.lang.String value) {
      validate(fields()[1], value);
      this.payload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * JSON serialized payload of any type
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payload' field.
      * JSON serialized payload of any type
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'payloadType' field.
      * The class name of the payload type for deserialization
      * @return The value.
      */
    public java.lang.String getPayloadType() {
      return payloadType;
    }


    /**
      * Sets the value of the 'payloadType' field.
      * The class name of the payload type for deserialization
      * @param value The value of 'payloadType'.
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder setPayloadType(java.lang.String value) {
      validate(fields()[2], value);
      this.payloadType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'payloadType' field has been set.
      * The class name of the payload type for deserialization
      * @return True if the 'payloadType' field has been set, false otherwise.
      */
    public boolean hasPayloadType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'payloadType' field.
      * The class name of the payload type for deserialization
      * @return This builder.
      */
    public com.ridehub.avro.common.EventEnvelope.Builder clearPayloadType() {
      payloadType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventEnvelope build() {
      try {
        EventEnvelope record = new EventEnvelope();
        record.eventName = fieldSetFlags()[0] ? this.eventName : (java.lang.String) defaultValue(fields()[0]);
        record.payload = fieldSetFlags()[1] ? this.payload : (java.lang.String) defaultValue(fields()[1]);
        record.payloadType = fieldSetFlags()[2] ? this.payloadType : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventEnvelope>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventEnvelope>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventEnvelope>
    READER$ = (org.apache.avro.io.DatumReader<EventEnvelope>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventName);

    if (this.payload == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.payload);
    }

    if (this.payloadType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.payloadType);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventName = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.payload = null;
      } else {
        this.payload = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payloadType = null;
      } else {
        this.payloadType = in.readString();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventName = in.readString();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payload = null;
          } else {
            this.payload = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payloadType = null;
          } else {
            this.payloadType = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










