/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ridehub.avro.route;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RouteDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6510100478324162838L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RouteDTO\",\"namespace\":\"com.ridehub.avro.route\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}],\"default\":null},{\"name\":\"routeName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"destination\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"distance\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"estimatedDuration\",\"type\":[\"null\",\"int\"],\"doc\":\"minutes\",\"default\":null},{\"name\":\"transportType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TransportType\",\"namespace\":\"com.ridehub.avro.enums\",\"symbols\":[\"TRAIN\",\"BUS\"]}],\"default\":null},{\"name\":\"isActive\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<RouteDTO> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RouteDTO> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RouteDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RouteDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RouteDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RouteDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RouteDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RouteDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RouteDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.lang.String routeName;
  private java.lang.String origin;
  private java.lang.String destination;
  private java.lang.Double distance;
  /** minutes */
  private java.lang.Integer estimatedDuration;
  private com.ridehub.avro.enums.TransportType transportType;
  private java.lang.Boolean isActive;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RouteDTO() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param routeName The new value for routeName
   * @param origin The new value for origin
   * @param destination The new value for destination
   * @param distance The new value for distance
   * @param estimatedDuration minutes
   * @param transportType The new value for transportType
   * @param isActive The new value for isActive
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public RouteDTO(java.util.UUID id, java.lang.String routeName, java.lang.String origin, java.lang.String destination, java.lang.Double distance, java.lang.Integer estimatedDuration, com.ridehub.avro.enums.TransportType transportType, java.lang.Boolean isActive, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.id = id;
    this.routeName = routeName;
    this.origin = origin;
    this.destination = destination;
    this.distance = distance;
    this.estimatedDuration = estimatedDuration;
    this.transportType = transportType;
    this.isActive = isActive;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return routeName;
    case 2: return origin;
    case 3: return destination;
    case 4: return distance;
    case 5: return estimatedDuration;
    case 6: return transportType;
    case 7: return isActive;
    case 8: return createdAt;
    case 9: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: routeName = value$ != null ? value$.toString() : null; break;
    case 2: origin = value$ != null ? value$.toString() : null; break;
    case 3: destination = value$ != null ? value$.toString() : null; break;
    case 4: distance = (java.lang.Double)value$; break;
    case 5: estimatedDuration = (java.lang.Integer)value$; break;
    case 6: transportType = (com.ridehub.avro.enums.TransportType)value$; break;
    case 7: isActive = (java.lang.Boolean)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    case 9: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'routeName' field.
   * @return The value of the 'routeName' field.
   */
  public java.lang.String getRouteName() {
    return routeName;
  }



  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public java.lang.String getOrigin() {
    return origin;
  }



  /**
   * Gets the value of the 'destination' field.
   * @return The value of the 'destination' field.
   */
  public java.lang.String getDestination() {
    return destination;
  }



  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Double getDistance() {
    return distance;
  }



  /**
   * Gets the value of the 'estimatedDuration' field.
   * @return minutes
   */
  public java.lang.Integer getEstimatedDuration() {
    return estimatedDuration;
  }



  /**
   * Gets the value of the 'transportType' field.
   * @return The value of the 'transportType' field.
   */
  public com.ridehub.avro.enums.TransportType getTransportType() {
    return transportType;
  }



  /**
   * Gets the value of the 'isActive' field.
   * @return The value of the 'isActive' field.
   */
  public java.lang.Boolean getIsActive() {
    return isActive;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Creates a new RouteDTO RecordBuilder.
   * @return A new RouteDTO RecordBuilder
   */
  public static com.ridehub.avro.route.RouteDTO.Builder newBuilder() {
    return new com.ridehub.avro.route.RouteDTO.Builder();
  }

  /**
   * Creates a new RouteDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RouteDTO RecordBuilder
   */
  public static com.ridehub.avro.route.RouteDTO.Builder newBuilder(com.ridehub.avro.route.RouteDTO.Builder other) {
    if (other == null) {
      return new com.ridehub.avro.route.RouteDTO.Builder();
    } else {
      return new com.ridehub.avro.route.RouteDTO.Builder(other);
    }
  }

  /**
   * Creates a new RouteDTO RecordBuilder by copying an existing RouteDTO instance.
   * @param other The existing instance to copy.
   * @return A new RouteDTO RecordBuilder
   */
  public static com.ridehub.avro.route.RouteDTO.Builder newBuilder(com.ridehub.avro.route.RouteDTO other) {
    if (other == null) {
      return new com.ridehub.avro.route.RouteDTO.Builder();
    } else {
      return new com.ridehub.avro.route.RouteDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for RouteDTO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RouteDTO>
    implements org.apache.avro.data.RecordBuilder<RouteDTO> {

    private java.util.UUID id;
    private java.lang.String routeName;
    private java.lang.String origin;
    private java.lang.String destination;
    private java.lang.Double distance;
    /** minutes */
    private java.lang.Integer estimatedDuration;
    private com.ridehub.avro.enums.TransportType transportType;
    private java.lang.Boolean isActive;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ridehub.avro.route.RouteDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.routeName)) {
        this.routeName = data().deepCopy(fields()[1].schema(), other.routeName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.distance)) {
        this.distance = data().deepCopy(fields()[4].schema(), other.distance);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.estimatedDuration)) {
        this.estimatedDuration = data().deepCopy(fields()[5].schema(), other.estimatedDuration);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.transportType)) {
        this.transportType = data().deepCopy(fields()[6].schema(), other.transportType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.isActive)) {
        this.isActive = data().deepCopy(fields()[7].schema(), other.isActive);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing RouteDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ridehub.avro.route.RouteDTO other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routeName)) {
        this.routeName = data().deepCopy(fields()[1].schema(), other.routeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.origin)) {
        this.origin = data().deepCopy(fields()[2].schema(), other.origin);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.destination)) {
        this.destination = data().deepCopy(fields()[3].schema(), other.destination);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.distance)) {
        this.distance = data().deepCopy(fields()[4].schema(), other.distance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.estimatedDuration)) {
        this.estimatedDuration = data().deepCopy(fields()[5].schema(), other.estimatedDuration);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.transportType)) {
        this.transportType = data().deepCopy(fields()[6].schema(), other.transportType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isActive)) {
        this.isActive = data().deepCopy(fields()[7].schema(), other.isActive);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'routeName' field.
      * @return The value.
      */
    public java.lang.String getRouteName() {
      return routeName;
    }


    /**
      * Sets the value of the 'routeName' field.
      * @param value The value of 'routeName'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setRouteName(java.lang.String value) {
      validate(fields()[1], value);
      this.routeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'routeName' field has been set.
      * @return True if the 'routeName' field has been set, false otherwise.
      */
    public boolean hasRouteName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'routeName' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearRouteName() {
      routeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public java.lang.String getOrigin() {
      return origin;
    }


    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setOrigin(java.lang.String value) {
      validate(fields()[2], value);
      this.origin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearOrigin() {
      origin = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'destination' field.
      * @return The value.
      */
    public java.lang.String getDestination() {
      return destination;
    }


    /**
      * Sets the value of the 'destination' field.
      * @param value The value of 'destination'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setDestination(java.lang.String value) {
      validate(fields()[3], value);
      this.destination = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'destination' field has been set.
      * @return True if the 'destination' field has been set, false otherwise.
      */
    public boolean hasDestination() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'destination' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearDestination() {
      destination = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Double getDistance() {
      return distance;
    }


    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setDistance(java.lang.Double value) {
      validate(fields()[4], value);
      this.distance = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearDistance() {
      distance = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedDuration' field.
      * minutes
      * @return The value.
      */
    public java.lang.Integer getEstimatedDuration() {
      return estimatedDuration;
    }


    /**
      * Sets the value of the 'estimatedDuration' field.
      * minutes
      * @param value The value of 'estimatedDuration'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setEstimatedDuration(java.lang.Integer value) {
      validate(fields()[5], value);
      this.estimatedDuration = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedDuration' field has been set.
      * minutes
      * @return True if the 'estimatedDuration' field has been set, false otherwise.
      */
    public boolean hasEstimatedDuration() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'estimatedDuration' field.
      * minutes
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearEstimatedDuration() {
      estimatedDuration = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportType' field.
      * @return The value.
      */
    public com.ridehub.avro.enums.TransportType getTransportType() {
      return transportType;
    }


    /**
      * Sets the value of the 'transportType' field.
      * @param value The value of 'transportType'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setTransportType(com.ridehub.avro.enums.TransportType value) {
      validate(fields()[6], value);
      this.transportType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'transportType' field has been set.
      * @return True if the 'transportType' field has been set, false otherwise.
      */
    public boolean hasTransportType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'transportType' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearTransportType() {
      transportType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isActive' field.
      * @return The value.
      */
    public java.lang.Boolean getIsActive() {
      return isActive;
    }


    /**
      * Sets the value of the 'isActive' field.
      * @param value The value of 'isActive'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setIsActive(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.isActive = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isActive' field has been set.
      * @return True if the 'isActive' field has been set, false otherwise.
      */
    public boolean hasIsActive() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isActive' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearIsActive() {
      isActive = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.updatedAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.RouteDTO.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RouteDTO build() {
      try {
        RouteDTO record = new RouteDTO();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.routeName = fieldSetFlags()[1] ? this.routeName : (java.lang.String) defaultValue(fields()[1]);
        record.origin = fieldSetFlags()[2] ? this.origin : (java.lang.String) defaultValue(fields()[2]);
        record.destination = fieldSetFlags()[3] ? this.destination : (java.lang.String) defaultValue(fields()[3]);
        record.distance = fieldSetFlags()[4] ? this.distance : (java.lang.Double) defaultValue(fields()[4]);
        record.estimatedDuration = fieldSetFlags()[5] ? this.estimatedDuration : (java.lang.Integer) defaultValue(fields()[5]);
        record.transportType = fieldSetFlags()[6] ? this.transportType : (com.ridehub.avro.enums.TransportType) defaultValue(fields()[6]);
        record.isActive = fieldSetFlags()[7] ? this.isActive : (java.lang.Boolean) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        record.updatedAt = fieldSetFlags()[9] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RouteDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<RouteDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RouteDTO>
    READER$ = (org.apache.avro.io.DatumReader<RouteDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










