/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ridehub.avro.route;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ScheduleDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1744401181698694843L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ScheduleDTO\",\"namespace\":\"com.ridehub.avro.route\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}],\"default\":null},{\"name\":\"routeId\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"uuid\"}],\"default\":null},{\"name\":\"departureTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"arrivalTime\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"totalSeats\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"availableSeats\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"basePrice\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":18,\"scale\":2}],\"default\":null},{\"name\":\"isActive\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<ScheduleDTO> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ScheduleDTO> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ScheduleDTO> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ScheduleDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ScheduleDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ScheduleDTO to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ScheduleDTO from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ScheduleDTO instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ScheduleDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID routeId;
  private java.time.Instant departureTime;
  private java.time.Instant arrivalTime;
  private java.lang.Integer totalSeats;
  private java.lang.Integer availableSeats;
  private java.math.BigDecimal basePrice;
  private java.lang.Boolean isActive;
  private java.time.Instant createdAt;
  private java.time.Instant updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ScheduleDTO() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param routeId The new value for routeId
   * @param departureTime The new value for departureTime
   * @param arrivalTime The new value for arrivalTime
   * @param totalSeats The new value for totalSeats
   * @param availableSeats The new value for availableSeats
   * @param basePrice The new value for basePrice
   * @param isActive The new value for isActive
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public ScheduleDTO(java.util.UUID id, java.util.UUID routeId, java.time.Instant departureTime, java.time.Instant arrivalTime, java.lang.Integer totalSeats, java.lang.Integer availableSeats, java.math.BigDecimal basePrice, java.lang.Boolean isActive, java.time.Instant createdAt, java.time.Instant updatedAt) {
    this.id = id;
    this.routeId = routeId;
    this.departureTime = departureTime;
    this.arrivalTime = arrivalTime;
    this.totalSeats = totalSeats;
    this.availableSeats = availableSeats;
    this.basePrice = basePrice;
    this.isActive = isActive;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return routeId;
    case 2: return departureTime;
    case 3: return arrivalTime;
    case 4: return totalSeats;
    case 5: return availableSeats;
    case 6: return basePrice;
    case 7: return isActive;
    case 8: return createdAt;
    case 9: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: routeId = (java.util.UUID)value$; break;
    case 2: departureTime = (java.time.Instant)value$; break;
    case 3: arrivalTime = (java.time.Instant)value$; break;
    case 4: totalSeats = (java.lang.Integer)value$; break;
    case 5: availableSeats = (java.lang.Integer)value$; break;
    case 6: basePrice = (java.math.BigDecimal)value$; break;
    case 7: isActive = (java.lang.Boolean)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    case 9: updatedAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }



  /**
   * Gets the value of the 'routeId' field.
   * @return The value of the 'routeId' field.
   */
  public java.util.UUID getRouteId() {
    return routeId;
  }



  /**
   * Gets the value of the 'departureTime' field.
   * @return The value of the 'departureTime' field.
   */
  public java.time.Instant getDepartureTime() {
    return departureTime;
  }



  /**
   * Gets the value of the 'arrivalTime' field.
   * @return The value of the 'arrivalTime' field.
   */
  public java.time.Instant getArrivalTime() {
    return arrivalTime;
  }



  /**
   * Gets the value of the 'totalSeats' field.
   * @return The value of the 'totalSeats' field.
   */
  public java.lang.Integer getTotalSeats() {
    return totalSeats;
  }



  /**
   * Gets the value of the 'availableSeats' field.
   * @return The value of the 'availableSeats' field.
   */
  public java.lang.Integer getAvailableSeats() {
    return availableSeats;
  }



  /**
   * Gets the value of the 'basePrice' field.
   * @return The value of the 'basePrice' field.
   */
  public java.math.BigDecimal getBasePrice() {
    return basePrice;
  }



  /**
   * Gets the value of the 'isActive' field.
   * @return The value of the 'isActive' field.
   */
  public java.lang.Boolean getIsActive() {
    return isActive;
  }



  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.time.Instant getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Creates a new ScheduleDTO RecordBuilder.
   * @return A new ScheduleDTO RecordBuilder
   */
  public static com.ridehub.avro.route.ScheduleDTO.Builder newBuilder() {
    return new com.ridehub.avro.route.ScheduleDTO.Builder();
  }

  /**
   * Creates a new ScheduleDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ScheduleDTO RecordBuilder
   */
  public static com.ridehub.avro.route.ScheduleDTO.Builder newBuilder(com.ridehub.avro.route.ScheduleDTO.Builder other) {
    if (other == null) {
      return new com.ridehub.avro.route.ScheduleDTO.Builder();
    } else {
      return new com.ridehub.avro.route.ScheduleDTO.Builder(other);
    }
  }

  /**
   * Creates a new ScheduleDTO RecordBuilder by copying an existing ScheduleDTO instance.
   * @param other The existing instance to copy.
   * @return A new ScheduleDTO RecordBuilder
   */
  public static com.ridehub.avro.route.ScheduleDTO.Builder newBuilder(com.ridehub.avro.route.ScheduleDTO other) {
    if (other == null) {
      return new com.ridehub.avro.route.ScheduleDTO.Builder();
    } else {
      return new com.ridehub.avro.route.ScheduleDTO.Builder(other);
    }
  }

  /**
   * RecordBuilder for ScheduleDTO instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ScheduleDTO>
    implements org.apache.avro.data.RecordBuilder<ScheduleDTO> {

    private java.util.UUID id;
    private java.util.UUID routeId;
    private java.time.Instant departureTime;
    private java.time.Instant arrivalTime;
    private java.lang.Integer totalSeats;
    private java.lang.Integer availableSeats;
    private java.math.BigDecimal basePrice;
    private java.lang.Boolean isActive;
    private java.time.Instant createdAt;
    private java.time.Instant updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ridehub.avro.route.ScheduleDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.routeId)) {
        this.routeId = data().deepCopy(fields()[1].schema(), other.routeId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.departureTime)) {
        this.departureTime = data().deepCopy(fields()[2].schema(), other.departureTime);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.arrivalTime)) {
        this.arrivalTime = data().deepCopy(fields()[3].schema(), other.arrivalTime);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.totalSeats)) {
        this.totalSeats = data().deepCopy(fields()[4].schema(), other.totalSeats);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.availableSeats)) {
        this.availableSeats = data().deepCopy(fields()[5].schema(), other.availableSeats);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[6].schema(), other.basePrice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.isActive)) {
        this.isActive = data().deepCopy(fields()[7].schema(), other.isActive);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing ScheduleDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ridehub.avro.route.ScheduleDTO other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.routeId)) {
        this.routeId = data().deepCopy(fields()[1].schema(), other.routeId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.departureTime)) {
        this.departureTime = data().deepCopy(fields()[2].schema(), other.departureTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.arrivalTime)) {
        this.arrivalTime = data().deepCopy(fields()[3].schema(), other.arrivalTime);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalSeats)) {
        this.totalSeats = data().deepCopy(fields()[4].schema(), other.totalSeats);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.availableSeats)) {
        this.availableSeats = data().deepCopy(fields()[5].schema(), other.availableSeats);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.basePrice)) {
        this.basePrice = data().deepCopy(fields()[6].schema(), other.basePrice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.isActive)) {
        this.isActive = data().deepCopy(fields()[7].schema(), other.isActive);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[9].schema(), other.updatedAt);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'routeId' field.
      * @return The value.
      */
    public java.util.UUID getRouteId() {
      return routeId;
    }


    /**
      * Sets the value of the 'routeId' field.
      * @param value The value of 'routeId'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setRouteId(java.util.UUID value) {
      validate(fields()[1], value);
      this.routeId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'routeId' field has been set.
      * @return True if the 'routeId' field has been set, false otherwise.
      */
    public boolean hasRouteId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'routeId' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearRouteId() {
      routeId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureTime' field.
      * @return The value.
      */
    public java.time.Instant getDepartureTime() {
      return departureTime;
    }


    /**
      * Sets the value of the 'departureTime' field.
      * @param value The value of 'departureTime'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setDepartureTime(java.time.Instant value) {
      validate(fields()[2], value);
      this.departureTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'departureTime' field has been set.
      * @return True if the 'departureTime' field has been set, false otherwise.
      */
    public boolean hasDepartureTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'departureTime' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearDepartureTime() {
      departureTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalTime' field.
      * @return The value.
      */
    public java.time.Instant getArrivalTime() {
      return arrivalTime;
    }


    /**
      * Sets the value of the 'arrivalTime' field.
      * @param value The value of 'arrivalTime'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setArrivalTime(java.time.Instant value) {
      validate(fields()[3], value);
      this.arrivalTime = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalTime' field has been set.
      * @return True if the 'arrivalTime' field has been set, false otherwise.
      */
    public boolean hasArrivalTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'arrivalTime' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearArrivalTime() {
      arrivalTime = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalSeats' field.
      * @return The value.
      */
    public java.lang.Integer getTotalSeats() {
      return totalSeats;
    }


    /**
      * Sets the value of the 'totalSeats' field.
      * @param value The value of 'totalSeats'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setTotalSeats(java.lang.Integer value) {
      validate(fields()[4], value);
      this.totalSeats = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'totalSeats' field has been set.
      * @return True if the 'totalSeats' field has been set, false otherwise.
      */
    public boolean hasTotalSeats() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'totalSeats' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearTotalSeats() {
      totalSeats = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableSeats' field.
      * @return The value.
      */
    public java.lang.Integer getAvailableSeats() {
      return availableSeats;
    }


    /**
      * Sets the value of the 'availableSeats' field.
      * @param value The value of 'availableSeats'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setAvailableSeats(java.lang.Integer value) {
      validate(fields()[5], value);
      this.availableSeats = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'availableSeats' field has been set.
      * @return True if the 'availableSeats' field has been set, false otherwise.
      */
    public boolean hasAvailableSeats() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'availableSeats' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearAvailableSeats() {
      availableSeats = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'basePrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getBasePrice() {
      return basePrice;
    }


    /**
      * Sets the value of the 'basePrice' field.
      * @param value The value of 'basePrice'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setBasePrice(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.basePrice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'basePrice' field has been set.
      * @return True if the 'basePrice' field has been set, false otherwise.
      */
    public boolean hasBasePrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'basePrice' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearBasePrice() {
      basePrice = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'isActive' field.
      * @return The value.
      */
    public java.lang.Boolean getIsActive() {
      return isActive;
    }


    /**
      * Sets the value of the 'isActive' field.
      * @param value The value of 'isActive'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setIsActive(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.isActive = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'isActive' field has been set.
      * @return True if the 'isActive' field has been set, false otherwise.
      */
    public boolean hasIsActive() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'isActive' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearIsActive() {
      isActive = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.time.Instant getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder setUpdatedAt(java.time.Instant value) {
      validate(fields()[9], value);
      this.updatedAt = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.ridehub.avro.route.ScheduleDTO.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ScheduleDTO build() {
      try {
        ScheduleDTO record = new ScheduleDTO();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.routeId = fieldSetFlags()[1] ? this.routeId : (java.util.UUID) defaultValue(fields()[1]);
        record.departureTime = fieldSetFlags()[2] ? this.departureTime : (java.time.Instant) defaultValue(fields()[2]);
        record.arrivalTime = fieldSetFlags()[3] ? this.arrivalTime : (java.time.Instant) defaultValue(fields()[3]);
        record.totalSeats = fieldSetFlags()[4] ? this.totalSeats : (java.lang.Integer) defaultValue(fields()[4]);
        record.availableSeats = fieldSetFlags()[5] ? this.availableSeats : (java.lang.Integer) defaultValue(fields()[5]);
        record.basePrice = fieldSetFlags()[6] ? this.basePrice : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.isActive = fieldSetFlags()[7] ? this.isActive : (java.lang.Boolean) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        record.updatedAt = fieldSetFlags()[9] ? this.updatedAt : (java.time.Instant) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ScheduleDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<ScheduleDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ScheduleDTO>
    READER$ = (org.apache.avro.io.DatumReader<ScheduleDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










