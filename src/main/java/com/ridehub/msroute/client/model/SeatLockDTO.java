/*
 * Ms Route API
 * Ms Route API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ridehub.msroute.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ridehub.msroute.client.model.TripDTO;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SeatLockDTO
 */
@JsonPropertyOrder({
  SeatLockDTO.JSON_PROPERTY_ID,
  SeatLockDTO.JSON_PROPERTY_SEAT_NO,
  SeatLockDTO.JSON_PROPERTY_USER_ID,
  SeatLockDTO.JSON_PROPERTY_STATUS,
  SeatLockDTO.JSON_PROPERTY_EXPIRES_AT,
  SeatLockDTO.JSON_PROPERTY_IDEMPOTENCY_KEY,
  SeatLockDTO.JSON_PROPERTY_CREATED_AT,
  SeatLockDTO.JSON_PROPERTY_UPDATED_AT,
  SeatLockDTO.JSON_PROPERTY_IS_DELETED,
  SeatLockDTO.JSON_PROPERTY_DELETED_AT,
  SeatLockDTO.JSON_PROPERTY_DELETED_BY,
  SeatLockDTO.JSON_PROPERTY_TRIP
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.14.0")
public class SeatLockDTO {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private Long id;

  public static final String JSON_PROPERTY_SEAT_NO = "seatNo";
  @jakarta.annotation.Nonnull
  private String seatNo;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  @jakarta.annotation.Nullable
  private UUID userId;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    HELD(String.valueOf("HELD")),
    
    EXPIRED(String.valueOf("EXPIRED")),
    
    COMMITTED(String.valueOf("COMMITTED"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @jakarta.annotation.Nonnull
  private StatusEnum status;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @jakarta.annotation.Nonnull
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_IDEMPOTENCY_KEY = "idempotencyKey";
  @jakarta.annotation.Nullable
  private String idempotencyKey;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @jakarta.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @jakarta.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_IS_DELETED = "isDeleted";
  @jakarta.annotation.Nullable
  private Boolean isDeleted;

  public static final String JSON_PROPERTY_DELETED_AT = "deletedAt";
  @jakarta.annotation.Nullable
  private OffsetDateTime deletedAt;

  public static final String JSON_PROPERTY_DELETED_BY = "deletedBy";
  @jakarta.annotation.Nullable
  private UUID deletedBy;

  public static final String JSON_PROPERTY_TRIP = "trip";
  @jakarta.annotation.Nonnull
  private TripDTO trip;

  public SeatLockDTO() {
  }

  public SeatLockDTO id(@jakarta.annotation.Nullable Long id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable Long id) {
    this.id = id;
  }


  public SeatLockDTO seatNo(@jakarta.annotation.Nonnull String seatNo) {
    
    this.seatNo = seatNo;
    return this;
  }

  /**
   * Get seatNo
   * @return seatNo
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEAT_NO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSeatNo() {
    return seatNo;
  }


  @JsonProperty(JSON_PROPERTY_SEAT_NO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeatNo(@jakarta.annotation.Nonnull String seatNo) {
    this.seatNo = seatNo;
  }


  public SeatLockDTO userId(@jakarta.annotation.Nullable UUID userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@jakarta.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  public SeatLockDTO status(@jakarta.annotation.Nonnull StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public SeatLockDTO expiresAt(@jakarta.annotation.Nonnull OffsetDateTime expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@jakarta.annotation.Nonnull OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public SeatLockDTO idempotencyKey(@jakarta.annotation.Nullable String idempotencyKey) {
    
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * Get idempotencyKey
   * @return idempotencyKey
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IDEMPOTENCY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdempotencyKey() {
    return idempotencyKey;
  }


  @JsonProperty(JSON_PROPERTY_IDEMPOTENCY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdempotencyKey(@jakarta.annotation.Nullable String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public SeatLockDTO createdAt(@jakarta.annotation.Nonnull OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@jakarta.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SeatLockDTO updatedAt(@jakarta.annotation.Nullable OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(@jakarta.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public SeatLockDTO isDeleted(@jakarta.annotation.Nullable Boolean isDeleted) {
    
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * Get isDeleted
   * @return isDeleted
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsDeleted() {
    return isDeleted;
  }


  @JsonProperty(JSON_PROPERTY_IS_DELETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDeleted(@jakarta.annotation.Nullable Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public SeatLockDTO deletedAt(@jakarta.annotation.Nullable OffsetDateTime deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletedAt(@jakarta.annotation.Nullable OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public SeatLockDTO deletedBy(@jakarta.annotation.Nullable UUID deletedBy) {
    
    this.deletedBy = deletedBy;
    return this;
  }

  /**
   * Get deletedBy
   * @return deletedBy
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getDeletedBy() {
    return deletedBy;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletedBy(@jakarta.annotation.Nullable UUID deletedBy) {
    this.deletedBy = deletedBy;
  }


  public SeatLockDTO trip(@jakarta.annotation.Nonnull TripDTO trip) {
    
    this.trip = trip;
    return this;
  }

  /**
   * Get trip
   * @return trip
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TripDTO getTrip() {
    return trip;
  }


  @JsonProperty(JSON_PROPERTY_TRIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrip(@jakarta.annotation.Nonnull TripDTO trip) {
    this.trip = trip;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeatLockDTO seatLockDTO = (SeatLockDTO) o;
    return Objects.equals(this.id, seatLockDTO.id) &&
        Objects.equals(this.seatNo, seatLockDTO.seatNo) &&
        Objects.equals(this.userId, seatLockDTO.userId) &&
        Objects.equals(this.status, seatLockDTO.status) &&
        Objects.equals(this.expiresAt, seatLockDTO.expiresAt) &&
        Objects.equals(this.idempotencyKey, seatLockDTO.idempotencyKey) &&
        Objects.equals(this.createdAt, seatLockDTO.createdAt) &&
        Objects.equals(this.updatedAt, seatLockDTO.updatedAt) &&
        Objects.equals(this.isDeleted, seatLockDTO.isDeleted) &&
        Objects.equals(this.deletedAt, seatLockDTO.deletedAt) &&
        Objects.equals(this.deletedBy, seatLockDTO.deletedBy) &&
        Objects.equals(this.trip, seatLockDTO.trip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, seatNo, userId, status, expiresAt, idempotencyKey, createdAt, updatedAt, isDeleted, deletedAt, deletedBy, trip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeatLockDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    seatNo: ").append(toIndentedString(seatNo)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    trip: ").append(toIndentedString(trip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

